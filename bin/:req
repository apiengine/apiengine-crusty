#!/bin/sh

req() {
    local injectable
    local mandatory
    local optional

    req_mandatory; mandatory=$__

    req_optional 
    json_munge_ $__
    optional=$__

    json_merge ${mandatory} ${optional}
    __payload=$__

    req_injectable ${__url}; injectable=$__
    eval __url=${injectable}
}

req_mandatory() {
    local i=0
    local json="{}"
    array_len "__args__m"; local len=$__
    while [ "${i}" != "${len}" ]; do
        array_get "__args__m" $i; local k=$__
        array_get "__cmdline" $i; local v=$__
        # FIX tidy this muck up
        # FIX encode in URL or PAYLOAD ... not both
        string_contains ${__url} "#${k}"
        if [ "$__" = "true" ]; then
            eval _${k}_=${v}
        else
            string_contains ${__url} "=${k}"
            if [ "$__" = "true" ]; then
                # FIX will need to tidy this indirection gumf
                eval _indirect_${k}_=${v}
                . ${CRUSTY_INDIRECTS}
                indirects ${k}
                v=$__
                eval _${k}_=${v}
            else
                json_add "${json}" "${k}" "${v}"; json=$__
            fi
        fi
        math_inc "i"
    done
    __=${json}
}

req_optional() {
    local json
    # FIX the following should be encapsulated in :param
    array_last "__cmdline"; json=$__
    json_is "${json}"
    if [ "$__" = "true" ]; then
        __=${json}
    else
        __="{}"
    fi
    # FIX validate each optional field
}

req_injectable() {
    local v

    v=$1
    v=`echo ${v} | sed 's,/#\([^/]*\),/${_\1_},g'`
    v=`echo ${v} | sed 's,/=\([^/]*\),/${_\1_},g'`
    __=${v}
}
