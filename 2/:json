#!/bin/sh

json_add() {
    local json=$1
    local k=$2
    local v=$3
    json_check_ ${json}
    json_munge_ "|${k}|:|${v}|"; local p=$__
    json_empty_ ${json}
    if [ "$__" = "true" ]; then
        __="{${p}}"
    else
        json_inner_ ${json}; local inner=$__
        __="{${inner},${p}}"
    fi
}

json_merge() {
    local l=$1
    local r=$2
    json_inner_ ${l}; local ll=$__
    json_inner_ ${r}; local rr=$__
    local merged="{${ll},${rr}}"
    json_empty_ ${l}
    if [ "$__" = "true" ]; then
        merged=${r}
    fi
    json_empty_ ${r}
    if [ "$__" = "true" ]; then
        merged=${l}
    fi
    __=${merged}
}

json_is() {
    local json=$1
    (echo ${json} | jshon -Q -t > /dev/null)
    if [ $? = 0 ]; then
        __="true"
    else
        __="false"
    fi
}

json_contains() {
    local json=$1
    local k=$2
    json_check_ "${json}"
    (echo ${json} | jshon -Q -e ${k} > /dev/null)
    if [ $? = 0 ]; then
        __="true"
    else
        __="false"
    fi
}

json_v() {
    # FIX consider fail if does not exist
    local json=$1
    local k=$2
    json_check_ "${json}"
    json_contains ${json} ${k}
    if [ $__ = "false" ]; then
        bomb_fail "json key \"${k}\" does not exist in ${json}"
    fi
    local v=`echo ${json} | jshon -e ${k}`
    __=`echo ${v} | sed s'+^"++g' | sed s'+"$++g'`
}

json_pretty() {
    local json=$1
    __=`echo "[${json}]" | jshon -e 1`
}

#

json_inner_() {
    local json=$1
    json_check_ ${json}
    __=`echo ${json} | sed s'+^{\(.*\)}$+\1+'`
}

json_check_() {
    local json=$1
    json_is "${json}"
    if [ "$__" = "false" ]; then
        bomb_fail "not json: ${json}"
    fi
}

json_empty_() {
    local json=$1
    json_check_ ${json}
    json_inner_ ${json}
    if [ "$__" = "" ]; then
        __="true"
    else
        __="false"
    fi
}

json_munge_() {
    local mungee=$1
    __=`echo ${mungee} | sed s'+'\''+\"+g' | sed s'+|+\"+g'`
    # for boolean types.  perhaps mod backend.
    # =`echo $__ | sed s'+"true"+true+g' | sed s'+"false"+false+g'`
}
