#!/bin/sh

# FIX probably not needed any more
json_munge() {
    # $1 mungee
    __=`echo $1 | sed s'+'\''+\"+g' | sed s'+|+\"+g'`
#    __=`echo $__ | sed s'+"true"+true+g' | sed s'+"false"+false+g'`
}

json_v() {
    # $1 json
    # $2 key
    json_check $1
    __=`echo $2 | jshon -e ${_json}`
    __=`echo $2 | sed s'+^"++g' | sed s'+"$++g'`
}

json_add() {
    # $1 json
    # $2 key
    # $3 value
    json_check $1
    json_munge "|$2|:|$3|"; _p=$__
    json_empty $1
    if [ "$__" = "true" ]; then
        __="{${_p}}"
    else
        json_inner $1; _inner=$__
        __="{${_inner},${_p}}"
    fi
}

json_inner() {
    # $1 json
    json_check $1
    __=`echo $1 | sed s'+^{\(.*\)}$+\1+'`
}

json_merge() {
    # $1 left
    # $2 right
    json_empty $1
    if [ "$__" = "true" ]; then
        __=$2
    fi
    json_empty $2
    if [ "$__" = "true" ]; then
        __=$1
    fi
    json_inner $1; __l=$__
    json_inner $2; __r=$__
    __="{$__l,$__r}"
}

json_is() {
    # $1 json
    string_startswith "{" "$1"
    _s=$__
    string_endswith "}" "$1"
    _e=$__
    if [ "$_s" = "true" -a "$_e" = "true" ]; then
        __="true"
    else
        __="false"
    fi
    # FIX [...] is valid json as well as {...}
}

json_check() {
    # $1 json
    json_is $1
    if [ "$__" != "true" ]; then
        bomb_fail "not json: $1"
    fi
}

json_empty() {
    # $1 json
    json_check $1
    json_inner $1
    if [ "$__" = "" ]; then
        __="true"
    else
        __="false"
    fi
}
